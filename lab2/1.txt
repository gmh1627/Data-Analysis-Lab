.：匹配任何字符（除了换行符）
*：匹配前面的子表达式零次或多次
+：匹配前面的子表达式一次或多次
?：匹配前面的子表达式零次或一次
^：匹配输入字符串的开始位置
$：匹配输入字符串的结束位置
[]：字符集合。匹配所包含的任意一个字符
()：标记一个子表达式的开始和结束位置
{}：指定前面的子表达式必须出现的次数
|：指定两项之间的一个选择
以下是一些使用正则表达式的例子：

a.b：匹配包含"anb"、"acb"、"adb"等的字符串（"."可以匹配任何字符）
a*：匹配包含"aaaa"、"aa"、"a"以及空字符串的字符串（"*"表示前面的字符可以出现零次或多次）
a+：匹配包含"aaaa"、"aa"、"a"的字符串，但不匹配空字符串（"+"表示前面的字符必须至少出现一次）
a?：匹配包含"a"以及空字符串的字符串（"?"表示前面的字符可以出现零次或一次）
^abc：匹配以"abc"开始的字符串
abc$：匹配以"abc"结束的字符串
[abc]：匹配包含"a"、"b"或"c"的字符串
(abc|def)：匹配包含"abc"或"def"的字符串
a{3}：匹配包含"aaa"的字符串

在Python中，r''用来创建一个原始字符串（raw string）。在原始字符串中，所有的字符都是直接按照字面的意思来使用，没有任何特殊的字符或转义字符。

例如，普通的字符串中，\n表示一个换行符，\t表示一个制表符。但在原始字符串中，\n就是两个字符：反斜杠\和n，\t就是两个字符：反斜杠\和t。

这在处理一些需要大量使用反斜杠的情况下非常有用，比如正则表达式。在正则表达式中，很多特殊字符前面都需要加反斜杠。如果不使用原始字符串，那么每个反斜杠都需要写成\\，这会使得正则表达式非常难以阅读和编写。使用原始字符串就可以避免这个问题。

例如，下面两个字符串是等价的：
s1 = r'\n\t'
s2 = '\\n\\t'